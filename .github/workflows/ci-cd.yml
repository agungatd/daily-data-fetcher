name: Data Pipeline CI/CD

on:
  push:
    branches: [ main ] # Trigger on push to main branch
  workflow_dispatch: {} # Allow manual trigger

jobs:
  lint_test:
    name: Lint and Test Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Test with pytest
        run: pytest tests

  build_push_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: lint_test # Run only if lint_test succeeds
    permissions:
      contents: read
      packages: write # Needed to push to GitHub Packages (ghcr.io)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Special GitHub Actions secret

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # ghcr.io/YOUR_USERNAME/repo-name
          tags: |
            type=sha # Tag with commit SHA
            type=raw,value=latest,enable={{is_default_branch}} # Tag 'latest' only on default branch (main)

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  provision_infra:
    name: Provision Infrastructure (Local)
    runs-on: ubuntu-latest
    needs: build_push_image # Ensure image is ready before potentially provisioning infra that uses it
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        # with:
        #   terraform_version: "1.0.0" # Specify version if needed

      - name: Terraform Init
        run: terraform init
        # Add cloud provider credentials here if using AWS/GCP/Azure
        # env:
        #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan
        # Add -out=tfplan for review steps in more complex setups

      - name: Terraform Apply
        run: terraform apply -auto-approve
        # Be cautious with -auto-approve in production!
        # Usually requires a manual approval step.

  # Simple "Deployment" - Run the container in Actions
  run_job:
    name: Run Data Fetch Job
    runs-on: ubuntu-latest
    needs: [build_push_image, provision_infra]
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run the data fetch container
        env:
          # Define environment variables for the 'run' step itself
          # IMAGE_TAG=ghcr.io/${{ github.repository }}:${{ github.sha }} 
          IMAGE_TAG: ghcr.io/agungatd/daily-data-fetcher:latest
          # --- Example Override ---
          DESIRED_CATEGORY: "Chemistry" 
        run: |
          echo "Running container: $IMAGE_TAG"
          docker pull $IMAGE_TAG
          # Run the container, show logs, remove afterwards
          echo "Running job for category: $DESIRED_CATEGORY"
          docker run --rm \
            -e API_CATEGORY="$DESIRED_CATEGORY" \
            -e OUTPUT_FILE="/app/output/nobelPrizesChemistry.json" \
            $IMAGE_TAG 
          echo "Container run finished."
          # Note: Output file is inside the container, not visible here unless mounted
